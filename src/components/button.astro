---
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'button'> {
	variant?: 'primary' | 'secondary' | 'danger';
	size?: 'sm' | 'md' | 'lg';
	loading?: boolean;
	outlined?: boolean;
}

const {
	type = 'button',
	disabled,
	variant = 'primary',
	size = 'md',
	loading,
	outlined,
	...buttonProps
} = Astro.props;

// Build conditional classes
const variantClasses = {
	primary:
		'bg-blue-400 hover:bg-blue-500 dark:bg-blue-500 dark:hover:bg-blue-600',
	secondary:
		'bg-gray-400 hover:bg-gray-500 dark:bg-gray-500 dark:hover:bg-gray-600',
	danger: 'bg-red-400 hover:bg-red-500 dark:bg-red-500 dark:hover:bg-red-600',
};

const sizeClasses = {
	sm: 'py-1 px-2 text-xs',
	md: 'py-2 px-4 text-sm',
	lg: 'py-3 px-6 text-base',
};
---

<button
	bg={outlined ? 'transparent' : variantClasses[variant]}
	text='blue-500 lg'
	p={sizeClasses[size]}
	border={`2 rounded ${outlined ? (variant === 'primary' ? 'blue-400' : variant === 'danger' ? 'red-400' : 'gray-400') : 'blue-200'}`}
	type={type}
	cursor='pointer select-none'
	class='disabled:text-amber'
	class:list={[
		disabled && 'opacity-50 cursor-not-allowed',
		loading && 'animate-pulse pointer-events-none',
		outlined && 'hover:bg-opacity-10',
		variant === 'danger' && outlined && 'text-red-400 hover:text-red-500',
	]}
	disabled={disabled || loading}
	{...buttonProps}
>
	{loading ? 'Loading...' : <slot />}
</button>
